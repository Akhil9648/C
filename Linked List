/*LinkedList all insertion Operations*/
#include <stdio.h>
#include<stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
struct Node* insertionatbeg(struct Node *head,int n)
{
    struct Node* ptr=(struct Node*)malloc(sizeof(struct Node));
    ptr->data=n;
    ptr->next=head;
    return ptr;
}
void linkedlisttraversal(struct Node*ptr)
{
    while(ptr!=NULL)
    {
        printf("%d\n",ptr->data);
        ptr=ptr->next;
    }
}
struct Node* insertioninbet(struct Node *head,int n,int in)
{
    struct Node* ptr=(struct Node*)malloc(sizeof(struct Node));
    int i=0;
    struct Node*p=head;
    while(i!=in)
    {
        p=p->next;
        i++;
    }
    ptr->data=n;
    ptr->next=p->next;
    p->next=ptr;
    return head;
}
struct Node* insertionatend(struct Node *head,int n)
{
    struct Node* ptr=(struct Node*)malloc(sizeof(struct Node));
    struct Node* p=head;
    while(p->next!=NULL)
    {
        p=p->next;
    }
    ptr->data=n;
    p->next=ptr;
    ptr->next=NULL;
    return head;
}
struct Node* insertionafternode(struct Node *head,int n,struct Node *pre)
{
    struct Node* ptr=(struct Node*)malloc(sizeof(struct Node));
    ptr->data=n;
    ptr->next=pre->next;
    pre->next=ptr;
    return head;
}
int main() {
    struct Node*head;
    struct Node *second;
    struct Node *third;
    struct Node *fourth;
    head = (struct Node *)malloc(sizeof(struct Node));
    second = (struct Node *)malloc(sizeof(struct Node));
    third = (struct Node *)malloc(sizeof(struct Node));
    fourth = (struct Node *)malloc(sizeof(struct Node));
    head->data = 7;
    head->next = second;

    second->data = 11;
    second->next = third;

    third->data = 41;
    third->next = fourth;

    fourth->data = 66;
    fourth->next = NULL;
       head=insertionatbeg(head,30);
       head=insertioninbet(head,75,0);
       head=insertionatend(head,45);
       head=insertionafternode(head,23,fourth);
       linkedlisttraversal(head);
    return 0;
}
